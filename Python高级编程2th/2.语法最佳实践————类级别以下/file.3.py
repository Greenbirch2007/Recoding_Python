# 2.3  其他语法元素

# for... else 语句    函数注解(function annotation)


# 2.3.1  for...else...语句
# 在for循环之后使用else子句，可以在循环"自然"结束而不是被break语句终止时执行一个代码块。

# for num in range(1):
#
# else:
#     print('no break')
#
# break
# for 循环之后else子句的含义是"没有break"


# 3.2  函数注解
# 函数注解是python3的特性。函数注解是关于用户定义函数使用的类型的完全可选的元信息，但事实上，它并不局限于类型提示，而且在python及其
#　标准库中也没有单个功能可以利用这种注解。这就是这个功能独特的原因：它没有任何语法上的意义。可以为函数定义注解，并在运行时获取这些注解

#　１．一般语法
#　对python官方文档的示例做一个修改，就可以很好展示如何定义并获取函数注解：

def f(ham:str,eggs:str='eggs') -> str:
    pass

print(f.__annotations__)
#　参数注解的定义为冒号后计算注解值的表达式。返回值注解的定义为表示def 语句结尾的冒号与参数列表之后的->之间的表达式
#　定义好之后，注解可以通过函数对象__annotations__属性获取，它是一个字典，应用运行期间可以获取
#　任何表达式都可以用作注解，ＩＱ位置靠近默认参数，这样可以创建一些迷惑人的函数定义

def square(number:0<=3 and 1=0) -> (\
        +9000):return number**2

print(square(10))

# 2.可能的用户
# 鼓励通过元类，装饰器或框架进行试验。另一方面，作为提议函数注解的官方文档
# PEP 3107  列出了以下可能的使用场景
# 提供类型信息
# １．类型检查
# ２．　让IDE显示函数接受和返回的类型
# ３．　函数重载/通用函数
# ４．　与其他语言之间的桥梁
# ５．　适配
# ６．　谓词逻辑函数
# ７．　数据库查询映射
# ８．　RPC参数编组
# ９．　参数和返回值的文档