# 第16章 协程

# "to yield "有两个意思:产出和让步.

#  对于python生成器中的yield来说,两个含义都成立.yield item 这行代码会产出一个值,提供给next(...)的调用方;此外,还会做出让步,暂停执行生成器,让
#  调用方继续工作,直到需要使用另外一个值时再调用next().调用方会从生成器中拉取值


#  从句法上看,协程与生成器类似,都是定义体中包含yield关键字的函数.可是,在协程中,yield通常出现在表达式的右边(如,datum = yield),可以产出值,也可以
#  不产出--如果关键字yield关键字后面没有表达式,那么生成器产出None.协程可能会从调用发接收数据,不过调用放把数据提供给协程使用的是.send(datum)方法
#  而不是next(...)函数,通常,调用发会把值推送给协程

#  yield关键字甚至还可以不接收或传出数据.不管数据如何流动,yield都是一种流程控制工具,使用它可以实现协作式多任务;协程可以把控制器让步给中心调度程序,从而
#  激活其他的协程


#  从根本上把yield视作控制流程的工具,这样就好理解协程了
#  本章的内容
#  1. 生成器作为协程使用时的行为和状态
#  2. 使用装饰器自动预激协程
#  3. 调用方如何使用生成器对象的.close()和.throw()方法控制协程
#  4. 协程终止时如何返回值
#  5. yield from 新句法的用途和语义
#  6. 使用案例--使用协程管理仿真系统中的并发活动



#  16.1  生成器如何进化成协程


#