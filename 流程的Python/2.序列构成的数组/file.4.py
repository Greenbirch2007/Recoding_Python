## 2.4  切片


#  在python里,像列表(list),元组(tuple),和字符串(str)这类序列类型都支持切片操作,但是实际上切片操作会更强大

#  这里讨论高级切片形式的用法,这么做是为了符合一个原则:先将用法,再将如何创建新类


#  2.4.1   为什么切片和区间会忽略最后一个元素

#  在切片和区间操作里不包含区间操作里不包含区间范围的最后一个元素是Python的风格,这个习惯符合Python,C和其他语言里以0作为起始下标的传统.好处如下

#  1. 当只有最后一个位置信息时,我们也可以快速看出切片和区间有几个元素,如range(3)和my_list[:3]都返回3个元素
#  2. 当起止位置信息都可见时,我们可以快速计算出切片和区间的长度,用最后一个数减去第一个下标(stop-start)即可
#  3.  这样做也让我们可以利用任意一个下标来把序列分割成不重叠的两部分,只要写成my_list[:x]和my_list[x:]就可以啦


l = [10,20,30,40,50,60]
print(l[:2]) # 在下标2的地方分割
print(l[2:])
# 接下来看下python解释器是如何理解切片操作的

#  2.4.2  对对象进行切片

#  一个原则,我们还可以用s[a:b:c]的形式对s在a和b之间以c为间隔取值.c的值还可以为负值,负值意味着反向取值

s = 'bicyle'
print(s[::3])
#　a:b:c  这种用法只能作为索引或下标用在[]中返回一个切片对象：slice(a,b,c).对seq[start:stop:step]进行求值的时候，python会调用seq.__getitem__(slice(start,stop,step))
#  就算还不会自定义序列类型，了解一下切片对象也是有好处的．例如，可以给切片命名，就像电子表格软件给单元格区域取名字一样．
#  比如，要解析纯文本文件，这时使用有名字的切片比用硬编码的数字区间要方便的多

#  示例２－１１　　纯文本文件形式的收据以一行字符串的形式被解析

invoice = """
.....0...6...................3333,,,,,666,,,,,,,,9999
1909    DSDSADFS          $17.50          3        $52.05
1464    ASER EW           $131.5          2        $3413.1
1321    SAEWSR            $66.99          1        $131.6"""

print(invoice)
SKU = slice(0,6)
descr = slice(6,40)
unit_price = slice(40,52)
quantity = slice(52,55)
item_total = slice(55,None)
line_items = invoice.split('/n')[2:]
for item in line_items:
    print(item[unit_price],item[descr])


# 有关切片(slice)对象．如果从python用户的角度触发，切片还有两个额外的功能：多维切片和省略表示法(...)

# 2.4.3 　多维切片和省略

# []运算符还可以使用以逗号分开的多个索引或切片,外部库numpy里就用到这个特性,二维的numpy.ndarray就可以用a[i,j]这种形式来获取,或是用a[m:n,k:l]
#　的方式来得到二维切片．要正确使用这种[]运算符的话，对象的特殊方法__getitem__和__setitem__需要以元组的形式来接收a[i,j]中的索引．
#　如果要得到a[i,j]的值，python会调用a.__getitem__((i,j))

#　python内置的序列类型都是一维的,因此它们只支持单一的索引，成对出现的索引是没有用的

#　省略(ellipsis)的正确书写方法是三个英文句号(...)
#　除了用来提取序列里的内容，切片还可以用来就地修改可变序列，也就是说修改的时候不需要重新组件序列

#　２．４．４　　给切片赋值
#　如果把切片放在赋值语句的左边，或把它作为del　操作的对象，就可以对序列进行嫁接，切除或就地修改，

l = list(range(10))
print(l)
l[2:5] = [20,30]
print(l)
del l[5:7]
print(l)
l[3::2] = [11,20]
print(l)
l[2:5]= [99]
print(l)

# 如果赋值的对象是一个切片，那么赋值语句的右侧必须是一个可迭代对象．即便只有单独的一个值，也要把　转换成可迭代的序列

#　序列的拼接操作，*,+ 的一些实现细节如下

#