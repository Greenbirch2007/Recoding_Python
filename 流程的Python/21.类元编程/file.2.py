#　２１．５　　定制描述符的元类

#　２１．６　元类的特殊方法__prepare__

#　元类的应用场景

#　１．　验证属性
#　２．　一次把是装饰器依附到多个方法上
#　３．　序列化对象或转换数据
#　４．　对象关系映射
#　５．　基于对象的持久存储
#　６．动态转换使用其他语言编写的类钢结构



#　２１．７　　类作为对象

#　python数据模型为每个类定义了很多属性，处理__mro__,__class__,__name__还有如下


#　１．　cls.__bases   由类的基类组成元组

#　２．　cls.__qualname__   从模块的去哪聚作用域到类的点分路径


#　３．　cls.__subclasses__()

#　这个方法返回一个列表，包含类的直接子类．这个方法的实现使用弱引用，放置在超类和子类(子类在__bases__属性中存储指向　超类的强引用
# )之间出现循环引用．这个方法返回的列表中是内存里现存的子类


#　４．　cls.mro()

#　构建类时，入股需要获取存储在类属性__mro__中的超类元组，解释器会调用这个方法．元组可以覆盖这个方法，定制要构建的类解析方法的顺序


#　dir(...)函数不会列出本节的任何一个属性

#　python的一些术语

#　绑定方法，编码解码器，变值方法，别名，并行赋值，
#　１．抽象基类，　无法实例化，只能扩展的类

#　２．初始化方法　__init__方法通过self参数传入的实例．实例其实是由__new__方法构建的

#　３．　存储属性
#　４．存取方法
#　５．代码异味

#　６．单例
#　７．　导入时
#　８．迭代器
#　９．惰性求值
#　１０．二进制序列
#　１１．泛函数
#　１２．非绑定方法
#　列表推导　 放在方括号里的表达式，使用关键字for和in

#　上下文管理器　　实现了__enter__和__exit__特殊方法的对象，在with块中使用

#　实参：调用函数时传给函数的表达式