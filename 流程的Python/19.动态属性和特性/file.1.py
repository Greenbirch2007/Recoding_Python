#  第19 章 动态属性和特性

#  特性至关重要的地方在于,特性的存在是的开发者可以非常安全并且确定可行地将公共数据属性作为类的公共接口的一部分开发处理

#  在Python中,数据的属性和处理数据的方法统称为属性(attribute).其实,方法只是可调用的属性.除了这两个,我们还可以创建特性(property)在不改变
#  类接口的前提下,使用存取方法(即度值方法和设值方法)修改数据属性,
#  不管服务是由存储还是计算实现的,一个模块提供的所有服务都应该通过统一的方式使用

#  除了特性,python还提供了丰富的api,用于控制属性的访问权限,以及实现动态属性.使用点浩,访问属性(如obj.attr),python解释器会调用特殊的方法
#  (如 _getattr__和__setattr__)计算属性,用户自己定义的类可以通过__getattr__方法实现"虚拟属性",当访问不存在的属性时,即时计算属性的值

#  动态创建属性是一种元编程


#  19.1  使用动态属性转换数据
#  19.1.1 使用动态属性访问json类数据

#  19.1.2 处理无效属性名

#  19.1.3 使用__new__方法以灵活的方式创建对象

#  通常把__init__称为构造方法,其实用于构造实例的特殊方法__new__:这是个类方法(使用特殊方式处理,因此不必使用@classmethod装饰器),必须
#  返回一个实例.返回的实例会作为第一个参数(即self)传给__init__方法.因为调用__init__方法时要传入实例,而且禁止返回任何值,所以__init__方法
#  其实是"初始化方法".真正的构造方法是__new__.我们几乎不需要自己编写__new__方法,因为从object类继承的实现已经足够了
#  __new__方法也可以返回其他类的实例,此时,解释器不会调用__init__方法

#  本章目前所举得例子,是为了展示如何使用基本的工具,如__getattr__方法,hasattr函数,getattr函数,@property装饰器和__dict__属性,来实现动态属性
#  特性京杭用于把公开的属性变成使用读值方法和设值方法管理的属性,且在不影响客户端代码的前提下实现业务规则


