# 面向对象技术简介
# 类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
# 类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
# 数据成员：类变量或者实例变量用于处理类及其实例对象的相关的数据。
# 方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
# 实例变量：定义在方法中的变量，只作用于当前实例的类。
# 继承：即一个派生类（derived
#
#
# class ）继承基类（base class ）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，素以Dog也是一个Animal。
#
#
# 实例化：创建一个类的实例，类的具体对象。
# 方法：类中定义的函数。
# 对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
# 和其它编程语言相比，Python
# 在尽可能不增加新的语法和语义的情况下加入了类机制。
#
# python3
# 类创建
# 面向对象编程是一种编程方式，此编程方式的落地需要使用 “类” 和 “对象” 来实现，所以，面向对象编程其实就是对 “类” 和 “对象” 的使用。
#
# 　　类就是一个模板，模板里可以包含多个函数，函数里实现一些功能
#
# 　　对象则是根据模板创建的实例，通过实例对象可以执行类中的函数
#
# 诶，你在这里是不是有疑问了？使用函数式编程和面向对象编程方式来执行一个“方法”时函数要比面向对象简便
#
# 面向对象：【创建对象】【通过对象执行方法】
# 函数编程：【执行函数】
# 观察上述对比答案则是肯定的，然后并非绝对，场景的不同适合其的编程方式也不同。
#
# 总结：函数式的应用场景 --> 各个函数之间是独立且无共用的数据
#
# 面向对象三大特性
# 面向对象的三大特性是指：封装、继承和多态。
#
# 一、封装
#
# 封装，顾名思义就是将内容封装到某个地方，以后再去调用被封装在某处的内容。
#
# 所以，在使用面向对象的封装特性时，需要：
#
# 将内容封装到某处
# 从某处调用被封装的内容
#
# self
# 是一个形式参数，当执行
# obj1 = Foo('wupeiqi', 18)
# 时，self
# 等于
# obj1
#
# 当执行
# obj2 = Foo('alex', 78)
# 时，self
# 等于
# obj2
#
# 所以，内容其实被封装到了对象
# obj1
# 和
# obj2
# 中，每个对象中都有
# name
# 和
# age
# 属性，在内存里类似于下图来保存。
#
#
#
# 第二步：从某处调用被封装的内容
#
# 第二步：从某处调用被封装的内容
#
# 调用被封装的内容时，有两种情况：
#
# 通过对象直接调用
# 通过self间接调用
# 1、通过对象直接调用被封装的内容
#
# 上图展示了对象
# obj1
# 和
# obj2
# 在内存中保存的方式，根据保存格式可以如此调用被封装的内容：对象.属性名
#
# 2、通过self间接调用被封装的内容
#
# 执行类中的方法时，需要通过self间接调用被封装的内容
#
# 复制代码
#
#
# class Foo:
#
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def detail(self):
#         print(self.name)
#         print(self.age)
#
#
# obj1 = Foo('chengd', 18)
# obj1.detail()  # Python默认会将obj1传给self参数，即：obj1.detail(obj1)，所以，此时方法内部的 self ＝ obj1，即：self.name 是 chengd ；self.age 是 18
#
# obj2 = Foo('python', 99)
# obj2.detail()  # Python默认会将obj2传给self参数，即：obj1.detail(obj2)，所以，此时方法内部的 self ＝ obj2，即：self.name 是 python ； self.age 是 99x
# 执行结果：
#
#
#

# 注意，除了子类和父类的称谓，另一种叫法就是派生类和基类，其实是一个意思

# 多继承怎么办？
#  1.是否可以继承多个类
#  ２．如果继承的多个类中定义了相同的函数，那么哪一个会被使用？

#  １．python的类可以继承多个类，java和ｃ#则只能继承一个类
#  ２．　python的类如果继承了多个类，那么其寻找方法有两种：经典类：深度有限；新式类：广度有限


#  如果当前类或父类继承了objext类，则这个类就是新式类，否则就是经典类


#  三，多态

#  有了继承，才有可能是多态
#  多态的意思就是，继承了之后，传入子类，可以直接使用父类的方法，也可以重写，这就是多态