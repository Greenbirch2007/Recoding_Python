# 第二章　字符串和文本

# 无论是解析数据还是产生输出，几乎每一个有实用价值的程序都会涉及某种形式的文本处理。本章的重点放在
# 有关文本操作的常见问题上，例如拆分字符串，搜索，替换，词法分析以及解析

# ２．１　针对任意多的分隔符拆分字符串

# ２．１．１　问题　
# 　我们需要将字符串拆分为不同的字段，但是分隔符(以及分隔符之间的空格)在整个字符串中并不一致

# ２．１．２　解决方案
# 　字符串对象的split()方法只能处理非常简单的情况，而且不支持多个分隔符，对分隔符周围可能存在的空格也无能为力
# 　当需要一些更为灵活的功能时，应该使用re.split()方法

line = 'asdfa aswera ; aeraer,awer,   llallala'

import re
print(re.split(r'[;,\s]\s*',line))  # 可以分为两部分，第一部分是一个；，空格　，第二部分是多个空格(*出现零次或多次)

# 2.1.3 讨论

# 　re.split()是很有用的，因为可以为分隔符指定多个模式。例如，上面的解决方式中，分隔符可以是逗号，分号或空格符(后面可跟着任意数量的额外空格)
# 　只要找到对应的模式，无论匹配点的两端是什么字段，整个匹配的结果就成为那个分隔符。
# 最终得到的结果是字段列表，通过str.split()得到的结果是一样的

# 当使用re.slit()时，需要小心正则表达式模式中的捕获组(capture group)是否包含在了括号中。如果用到了捕获组
# 那么匹配的文本页会包含在最终结果中。比如，看看了下面的结果

fields = re.split(r'(;|,|\s)\s*',line)
print(fields)

# 在特定的上下文中获取到分隔字符页可能是有用的。例如，也许稍后要用到分隔字符来改进字符串的输出

values = fields[::2]
print(values)
print(88*'.')
delimiters = fields[1::2] + ['']
print(values)
print(delimiters)

# Reform the line using the same delimiters
print("".join(v+d for v,d in zip(values,delimiters)))
#  []是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s*]表示空格或者*号。
# 圆括号()是组，主要应用在限制多选结构的范围/分组/捕获文本/环视/特殊模式处理

# 如果不想在结果中看到分隔字符，但仍然想用括号来对正则表达式模式进行分组，请确保用的是非捕获组，以(?:...)的形式指定，如

print(re.split(r'(?:,|;|\s)\s*',line))

