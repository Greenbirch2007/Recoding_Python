# 1.9 在两个字典中寻找相同点


# 1.9.1 问题 有两个字典，我们想找出它们中间可能相同的地方（相同的键、相同的值等）

# 1.9.2 解决方案

# 考虑如下的两个字典：


a = {
    'x':1,
    'y':2,
    'z':3
}

b = {
    'w':10,
    'x':11,
    'y':2
}

# 要找出这两个字典中的相同支出，只需要通过keys()或items()方法执行常见的集合操作即可。例如：

# Find keys in common

t = a.keys() & b.keys()
print(t)

print(88*'~')

# Find keys in a  that are not in b

t1 = a.keys() - b.keys()
print(t1)


print(88*'~')

# Find (key,value) pairs in common

t2 = a.items() & b.items()
print(t2)

# 这些类型的操作也可用来修改或过滤掉字典中的内容。例如，假设想创建一个新的字典，其中会去掉某些键。
# 下面是使用了字典推导式的代码的例子：

# Make a new dictionary with certain keys removed

c = {key:a[key] for key in a.keys()-{'z','w'}}
print(c)

# 1.9.3 讨论  字典就是一系列键和值之间的映射集合。字典的keys()方法会返回keys-view对象，其中暴露
# 了所有的键。关于字典的键有一个很少有人知道的特性，那就是他们也支持常见的集合操作，比如，并集，交集和差集
# 因此，如果需要对字典的键做常见的集合操作，那么就能直接使用keys-view对象而不必先将它们转化为集合

# 字典的items()方法返回由(key,value)对组成的items-view对象。这个对象支持类似的集合操作，
# 可用来完成找出两个字典间有哪些键值对有相同之处的操作

# 尽管类似，但是字典的values()方法并不支持集合操作。部分原因是因为在字典中键和值是不同的，从值的角度
# 来看并不能不保证所有的值都是唯一的。但这一条原因就使得某些特定的集合操作有问题
# 但是，如果必须执行这样的操作，还是可以现将值转化为结婚来实现