# 8.18  用Mixin技术来扩展类定义
# 8.18.1 问题
# 希望扩展其他类的功能的方法，但是需要添加方法的这些类之间并不一定属于继承关系。因此，没法将这些方法直接关联到一个共同的基类上
# 8.18.2  解决方法

#  本节提到的问题在对类进行定制化处理时通常都会出现。例如，某个库提供了一组基础类以及一些可选的定制化方法，如果用户
# 需要的话可以自行添加
# 8.18.3 讨论
# mixin类一般都是为了对已有的类增加一些可选的功能特性

# 1.首选，mixin类绝不是为了直接实例化而创建的。例如本节中所有的mixin类都不能独自工作。它们必须同另一个实现了所需的映射
# 功能的类混合在一起才行
# 2. 其次,mixin类一般来说是没有状态的，这意味着mixin类没有__init__()方法，也就没有实例变量。

# 3.最后，使用super()函数是必要的，这也是编写mixin类的关键部分。在解决方案中。这些类重新定义了一些特定的关键方法，比如__getitem__(),__setitem__()
# 它们也需要调用这些方法的原始版本。通过使用super(),将这个任务交给了方法解析顺序(MRO)上的下一个类。

# 实现mixin的另一种方法是利用类装饰器