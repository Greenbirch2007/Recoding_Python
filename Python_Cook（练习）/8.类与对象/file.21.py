# 8.21 实现访问者模式

# 8.21.1 问题

# 我们需要编写的代码来处理或遍历一个由许多不同类型的对象组成的复杂数据结构，每种类型的对象处理的方式都不相同。例如遍历一个树结构，根据
# 遇到的树节点的类型来执行不同的操作

# 8.21.2  解决方案
# 我们可以用这些类来构建嵌套式的数据结构
# 为了能让处理过程变得通用，一种常见的解决方案就是实现所谓的"访问这模式"。要使用这个类，程序员从该类中继承并实现
# 各种visit_Name()方法，这里的Name应该由节点的类型来替换。堆栈机 (stack machine)

# 8.21.3  讨论
# 本节涵盖了两个核心思想。首先是设计策略，即把操作复杂数据结构的代码和数据结构本身进行解耦。本节中没有任何一个Node类的实现有对数据进行操作
# 本节的第二个核心思想是对于访问者类本身的实现

#  访问者模式的一个缺点重度依赖递归