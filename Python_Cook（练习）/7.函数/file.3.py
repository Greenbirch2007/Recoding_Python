# ７．３　将元数据信息附加到函数参数上

# 7.3.1 问题
# 　我们已经编写好了一个函数，但是希望能为参数附加上一些额外的信息，这样其他人可以对函数的使用防范有更多的认识和了解

# 7.3.2  解决方案　
# 函数的参数注解可以提示程序员该函数应该如何使用，比如，考虑下面这个带参数注解的函数:


def add(x:int,y:int)->int:
    return x + y

# Python解释器并不会附加任何语法意义到这些参数注解上。它们既不是类型检查也会改变Python的行为。但是，参数注解会给其他阅读源代码的人
# 带来有用的提示。一些第三方工具和框架可能也会为注解加上语法含义。这些注解也会出现在文档中：

# print(help(add))

# 尽管可以将任何类型的对象作为函数注解附加到函数定义上(比如，数字，字符串，实例等),但是通常只有类和字符串才显得有意义

# 7.3.3  讨论

# 函数注解只会保存在函数的__annotations__属性中。如下：
print(add.__annotations__)
# 尽管函数注解有着许多潜在的用途，但它们的主要功能也许就丰富以下文档内容了。因为Python中并没有类型声明，所以
# 如果只是简单地阅读一下源代码就想知道打算给函数传递什么对象常常是比较苦难的。函数注解就可以带给我更多提示
# ９．２的高级示例，展示了如何利用函数注解来实现函数重载
