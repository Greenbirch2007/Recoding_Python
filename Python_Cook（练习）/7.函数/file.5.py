# ７．５　　定义带有默认参数的函数
# ７．５．１　问题
# 我们想定义一个函数或方法，其中有一个或多个参数是可选的并且带有默认值。
# ７．５．２　解决方案
# 表面上看定义一个带有可选参数是非常简单的————只需要在定义中为参数赋值，并确保默认参数出现在最后即可，如下

# #
# def spam(a,b=42):
#     print(a,b)




# 如果默认值是可变容器的话，比如说列表，集合或字典，那么应该把None作为默认值，代码应该进行如下改写：

# using a list as a default value

# def spam(a,b=None):
#     if b is None:
#         b =[]

# 如果不打算提供一个默认值，只是想编写代码来检测可选参数是否被赋予了某个特定的值，那么可以采用如下的手法：

# _no_value = object()
#
# def spam(a,b=_no_value):
#     if b is _no_value:
#         print("No b value supplied")
#
# # spam(1)
# spam(1,2)
# spam(1,None)
# 请仔细区分不传递任何值和传递None之间的区别
# ７．５．３　　讨论

# 定义带有默认参数的函数看似容易，但其实并不像看到的那么简单
# 首先，对默认参数的赋值只会在函数定义的时候绑定一次。可用下面例子测试

x = 42
# def spam(a,b=x):
#     print(a,b)
#
#
# spam(1)
# x = 23
# spam(1)

# 注意到修改变量x的值(x被作为函数参数的默认值)并没有对函数产生任何效果。这是因为默认值已经在函数定义的时候就确定好了
# 其次，给默认参数赋值的应该总是不可变的对象，比如None,True,False,数字或字符串。
# 特别要注意的是，绝对不要编写如下代码

# def spam(a,b=[])

# 如果默认值在函数体外被修改了，那么这种修改将在之后的函数调用中对参数的默认值产生持续的影响，如下：

# def spam(a,b=[]):
#     # print(b)
#     return b
#
#
# x =spam(1)
# print(x)
# x.append(99)
# x.append("Yow!")
# print(x)
# print(spam(1))

#  要避免出现这种问题，最好按照解决方案中的做法，使用None作为默认值并在函数体中增加一个对默认值的检查


# 当检测到默认值是否为None时，本节示例的关键之处在于对is操作符的运用。有时候人会发错

def spam(a,b=None):
    if not b:
        b = []

# 这里出现的问题在于尽管None会判定为False，可是还有许多其他的对象(比如长度为0的字符串，列表，元组，字典等)
# 也存在这种行为。因此，上面实例出给出的条件检测会将某些特定的输入也判定为False，从而错误地忽略掉这些输入值。如下


spam(1)
x = []
spam(1,x)
spam(1,0)
spam(1,"")

# 本节最后讨论的内容更加巧妙————在函数中检测是否对可选参数提供了某个特定值(可以是任意值)、这里最为棘手的地方在于我们
# 不能用None，0或False当做默认值来检查用户是否提供了参数(因为所有这些值都是完全合法的参数，用户极有可能把它们作为参数)
# 因此，需要用其他的办法来检测

# 要解决这问题，可以利用object()创建一个独特的私有实例，就像解决方案中给出的那样(即，变量_no_value)
# 在函数中，可以用这个特殊值来同用户提供的参数做相等性检测，以此判断用户是否提供了参数。这里主要考虑到对于用户来说，
# 把_no_value实例作为输入参数几乎是不可能的。因此，如果要判断用户是否提供了某个参数，_no_value就成了一个可以用来安全比较的值


# 这里用到的object()可能看起来很不常见。object作为Python中几乎所有对象的基类而存在。可以创建object的实例，但是它们没有任何
# 值得注意的方法，也就没有任何实例数据，因此一般来说我们对毫无兴趣(因为底层缺少__dict__字典，我们甚至没有为它设置任何属性)。
# 唯一可做的是检测相等性，这也使得它们可作为特殊值来使用，就像我们给出的解决方案中那样。

