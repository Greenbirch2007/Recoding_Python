# ９．１５　　定义一个能接受可选参数的元类

# ９．１５．１　　问题
# 我们想定义一个元类，使得在定义类的时候能够提供可选的参数。这样的话在创建类型的时候可以对处理过程进行控制和配置

# ９．１５．２　解决方案
# 在定义类的时候，Python允许我们在class语句中通过metaclass关键字参数来指定元类。例如在抽象基类中我们可以这样指定元类
#　但，在自定义的元类中我们还可以提供额外的关键字参数。要在元类中支持这样的关键字参数，需要保证在定义__prepare__(),__new__()
# 以及__init__()方法时使用keyword-only参数来指定它们

# ９．１５．３　讨论
# 要对元类添加可选的关键字参数，需要理解类创建过程所涉及的所有步骤，这是因为额外的参数会传递给每一个与该过程有关的方法。__prepare__()方法
# 是第一个被调用的，用来创建类的名称空间，这是在处理类的定义体之前需要完成的。
# 一般来说，这个方法只是简单地返回一个字典或其他的映射型对象。__new__()方法用来实例化最终得到的类型对象，它会在类的定义体被完全
# 执行完毕后才调用。最后调用的是__init__()方法，用来执行任何其他额外的初始化步骤

# 当编写元类时，比较常见的做法是只定义一个__new__()或__init__()方法，而不会同时定义这两者。但是，如果打算接受额外的关键字参数，那么
# 两个方法都必须提供，并且要提供可兼容的函数签名。默认的__prepare__()方法可接受任意的关键字参数，只是会忽略它们。唯一一种需要自行定义的
# __prepare__()方法的情况就是当额外的参数多少会影响到名称空间的创建管理时
# 本节中使用了keyword-only参数，这也反映出一个事实，即这样的参数在创建类的过程中只会以关键字形式提供
# 用关键字参数来配置元类页可以看做是通过类变量来实现同一目标的另一种方式。

# 通过提供额外参数的方式来实现，这么做的优点在于它们不会污染类的名称空间。因为这些参数只对于类的创建有意义，对于类中需要执行的语句来说
# 是没有实际意义的。此外，它们对于__prepare__()来说是可见的，而这个方法会在处理类定义体中任何语句之前先得到运行。而另一方面
# 类变量只能被元类的__new__()和__init__()方法访问